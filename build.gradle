buildscript {
	ext {
		kotlinVersion = '1.0.3'
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'war'


war {
	baseName = 'ask-request'
	version = '0.0.1-SNAPSHOT'
}
/*sourceCompatibility = 1.8*/
/*targetCompatibility = 1.8*/

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
    //compile('net.sourceforge.nekohtml:nekohtml:1.9.15') // for LEGACY HTML5 template
	/*compile('org.springframework.boot:spring-boot-starter-data-jpa')*/
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

bootRun {
	jvmArgs = ['-Ddebug']
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}
